generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Product {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  pathName    String?    @unique @default(cuid())
  description String?
  imageId     String?
  price       Float?
  courses     Course[]
  purchases   Purchase[]
}

model Course {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  pathName    String?  @unique @default(cuid())
  description String?
  imageId     String?
  position    Int
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([productId], map: "Course_productId_fkey")
}

model Lesson {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  title            String
  type             LessonType?       @default(Lecture)
  position         Int
  pathName         String?
  isPublished      Boolean           @default(false)
  isFree           Boolean           @default(false)
  courseId         String
  course           Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress     UserProgress[]
  LeetcodeProblems LeetcodeProblem[]
  PracticeProblems PracticeProblem?
  video            Video?

  @@index([courseId], map: "Lesson_courseId_fkey")
}

model PracticeProblem {
  id           String                        @id @default(uuid())
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  problemName  String
  content      String                        @default("")
  executeFile  String                        @default("")
  lessonId     String?                       @unique
  lesson       Lesson?                       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  UserProgress UserPracticeProblemProgress[]

  @@index([lessonId], map: "PracticeProblem_lessonId_fkey")
}

model LeetcodeProblem {
  id           String                        @id @default(uuid())
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  problemName  String
  threadId     String?
  difficulty   Difficulty                    @default(Easy)
  lessonId     String
  lesson       Lesson                        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  UserProgress UserLeetcodeProblemProgress[]

  @@index([lessonId], map: "LeetcodeProblem_lessonId_fkey")
}

model Video {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  playbackId String
  duration   Int      @default(0)
  lessonId   String?  @unique
  lesson     Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  lessonId    String
  isCompleted Boolean  @default(false)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([lessonId], map: "UserProgress_lessonId_fkey")
}

model UserPracticeProblemProgress {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  userId          String
  problemId       String
  tokenId         String?         @unique
  PracticeProblem PracticeProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  Submission      Submission?     @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([problemId], map: "UserPracticeProblemProgress_problemId_fkey")
}

model Submission {
  id                  String                       @id @default(uuid())
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @default(now()) @updatedAt
  sourceCode          String?                      @db.Text
  language            String?
  status              String?                      @default("Pending")
  timeExecuted        String?
  memoryUsed          Int?
  userPracticeProblem UserPracticeProblemProgress?
}

model UserLeetcodeProblemProgress {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  problemId       String
  isCompleted     Boolean         @default(false)
  LeetcodeProblem LeetcodeProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
  @@index([problemId], map: "UserLeetcodeProblemProgress_problemId_fkey")
}

model Purchase {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId], map: "Purchase_productId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum LessonType {
  Lecture
  Exercise
  Note
  Optional
}

// enum SubmissionStatus {
//   Pending
//   Accepted
//   WrongAnswer
//   TimeLimitExceeded
//   MemoryLimitExceeded
//   RuntimeError
//   CompilationError
//   InternalError
//   UnknownError
// }
